State 68 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: instructions
    2        | ε

    3 instructions: instructions ';' instruction
    4             | instruction

    5 instruction: ID '=' concat
    6            | ID '[' op_int ']' '=' concat
    7            | declare ID '[' integer ']'
    8            | IF testing THEN instructions maybe_else instructions FI
    9            | FOR ID DO instructions DONE
   10            | FOR ID IN ops DO instructions DONE
   11            | WHILE testing DO instructions DONE
   12            | UNTIL testing DO instructions DONE
   13            | CASE op IN cases ESAC
   14            | EKKO ops
   15            | READ ID
   16            | READ ID '[' op_int ']'
   17            | dfun
   18            | cfun
   19            | RETURN
   20            | RETURN op_int
   21            | EXIT
   22            | EXIT op_int

   23 maybe_else: ELIF testing THEN instructions maybe_else
   24           | ELSE instructions
   25           | ε

   26 $@1: ε

   27 cases: cases filter $@1 ')' instructions ';' ';'
   28      | filter ')' instructions ';' ';'

   29 filter: word
   30       | '"' string '"'
   31       | '\'' string '\''
   32       | filter '|' word
   33       | filter '|' '"' string '"'
   34       | filter '|' '\'' string '\''
   35       | '*'

   36 ops: ops op
   37    | op
   38    | '$' '{' ID '[' '*' ']' '}'

   39 concat: concat op
   40       | op

   41 testing: test test_expr

   42 test_expr: test_expr or test_expr2
   43          | test_expr2

   44 test_expr2: test_expr2 and test_expr3
   45           | test_expr3

   46 test_expr3: '(' test_expr ')'
   47           | '!' '(' test_expr ')'
   48           | test_instr
   49           | '!' test_instr

   50 test_instr: concat eq concat
   51           | concat neq concat
   52           | operator1 concat
   53           | op operator2 op

   54 op: '$' '{' ID '}'
   55   | '$' '{' ID '[' op_int ']' '}'
   56   | word
   57   | '$' integer
   58   | '$' '*'
   59   | '$' '?'
   60   | '"' string '"'
   61   | '\'' string '\''
   62   | '$' '(' expr sum_int ')'
   63   | '$' '(' cfun ')'

   64 operator1: nnull
   65          | null

   66 operator2: eq
   67          | neq
   68          | gt
   69          | ge
   70          | lt
   71          | le

   72 sum_int: sum_int plus_minus prod_int
   73        | prod_int

   74 prod_int: prod_int mult_div_mod op_int
   75         | op_int

   76 op_int: '$' '{' ID '}'
   77       | '$' '{' ID '[' op_int ']' '}'
   78       | '$' integer
   79       | plus_minus '$' '{' ID '}'
   80       | plus_minus '$' '{' ID '[' op_int ']' '}'
   81       | plus_minus '$' integer
   82       | integer
   83       | plus_minus integer
   84       | '(' sum_int ')'

   85 plus_minus: '+'
   86           | '-'

   87 mult_div_mod: '*'
   88             | '/'
   89             | '%'

   90 dfun: ID '(' ')' '{' declarations instructions '}'

   91 declarations: declarations local ID '=' concat ';'
   92             | ε

   93 cfun: ID ops
   94     | ID


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 47 49
    '"' (34) 30 33 60
    '$' (36) 38 54 55 57 58 59 62 63 76 77 78 79 80 81
    '%' (37) 89
    '\'' (39) 31 34 61
    '(' (40) 46 47 62 63 84 90
    ')' (41) 27 28 46 47 62 63 84 90
    '*' (42) 35 38 58 87
    '+' (43) 85
    '-' (45) 86
    '/' (47) 88
    ';' (59) 3 27 28 91
    '=' (61) 5 6 91
    '?' (63) 59
    '[' (91) 6 7 16 38 55 77 80
    ']' (93) 6 7 16 38 55 77 80
    '{' (123) 38 54 55 76 77 79 80 90
    '|' (124) 32 33 34
    '}' (125) 38 54 55 76 77 79 80 90
    error (256)
    ID <id> (258) 5 6 7 9 10 15 16 38 54 55 76 77 79 80 90 91 93 94
    integer <integer> (259) 7 57 78 81 82 83
    declare (260) 7
    IF (261) 8
    THEN (262) 8 23
    FI (263) 8
    ELIF (264) 23
    ELSE (265) 24
    FOR (266) 9 10
    DO (267) 9 10 11 12
    IN (268) 10 13
    DONE (269) 9 10 11 12
    WHILE (270) 11
    UNTIL (271) 12
    CASE (272) 13
    ESAC (273) 13
    EKKO (274) 14
    READ (275) 15 16
    RETURN (276) 19 20
    EXIT (277) 21 22
    word <string> (278) 29 32 56
    string <string> (279) 30 31 33 34 60 61
    test (280) 41
    or (281) 42
    and (282) 44
    eq (283) 50 66
    neq (284) 51 67
    gt (285) 68
    ge (286) 69
    lt (287) 70
    le (288) 71
    null (289) 65
    nnull (290) 64
    expr (291) 62
    local (292) 91


Nonterminals, with rules where they appear

    $accept (57)
        on left: 0
    program <quad> (58)
        on left: 1 2
        on right: 0
    instructions <quad> (59)
        on left: 3 4
        on right: 1 3 8 9 10 11 12 23 24 27 28 90
    instruction <quad> (60)
        on left: 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
        on right: 3 4
    maybe_else <quad> (61)
        on left: 23 24 25
        on right: 8 23
    cases <quad> (62)
        on left: 27 28
        on right: 13 27
    $@1 (63)
        on left: 26
        on right: 27
    filter <filter_t> (64)
        on left: 29 30 31 32 33 34 35
        on right: 27 28 32 33 34
    ops <quad> (65)
        on left: 36 37 38
        on right: 10 14 36 93
    concat <quad> (66)
        on left: 39 40
        on right: 5 6 39 50 51 52 91
    testing <quad> (67)
        on left: 41
        on right: 8 11 12 23
    test_expr <quad> (68)
        on left: 42 43
        on right: 41 42 46 47
    test_expr2 <quad> (69)
        on left: 44 45
        on right: 42 43 44
    test_expr3 <quad> (70)
        on left: 46 47 48 49
        on right: 44 45
    test_instr <quad> (71)
        on left: 50 51 52 53
        on right: 48 49
    op <quad> (72)
        on left: 54 55 56 57 58 59 60 61 62 63
        on right: 13 36 37 39 40 53
    operator1 <integer> (73)
        on left: 64 65
        on right: 52
    operator2 <integer> (74)
        on left: 66 67 68 69 70 71
        on right: 53
    sum_int <quad> (75)
        on left: 72 73
        on right: 62 72 84
    prod_int <quad> (76)
        on left: 74 75
        on right: 72 73 74
    op_int <quad> (77)
        on left: 76 77 78 79 80 81 82 83 84
        on right: 6 16 20 22 55 74 75 77 80
    plus_minus <integer> (78)
        on left: 85 86
        on right: 72 79 80 81 83
    mult_div_mod <integer> (79)
        on left: 87 88 89
        on right: 74
    dfun <quad> (80)
        on left: 90
        on right: 17
    declarations <quad> (81)
        on left: 91 92
        on right: 90 91
    cfun <quad> (82)
        on left: 93 94
        on right: 18 63


State 0

    0 $accept: • program $end

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    $default  reduce using rule 2 (program)

    program       go to state 12
    instructions  go to state 13
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 1

    5 instruction: ID • '=' concat
    6            | ID • '[' op_int ']' '=' concat
   90 dfun: ID • '(' ')' '{' declarations instructions '}'
   93 cfun: ID • ops
   94     | ID •

    word  shift, and go to state 17
    '='   shift, and go to state 18
    '['   shift, and go to state 19
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 22
    '('   shift, and go to state 23

    $default  reduce using rule 94 (cfun)

    ops  go to state 24
    op   go to state 25


State 2

    7 instruction: declare • ID '[' integer ']'

    ID  shift, and go to state 26


State 3

    8 instruction: IF • testing THEN instructions maybe_else instructions FI

    test  shift, and go to state 27

    testing  go to state 28


State 4

    9 instruction: FOR • ID DO instructions DONE
   10            | FOR • ID IN ops DO instructions DONE

    ID  shift, and go to state 29


State 5

   11 instruction: WHILE • testing DO instructions DONE

    test  shift, and go to state 27

    testing  go to state 30


State 6

   12 instruction: UNTIL • testing DO instructions DONE

    test  shift, and go to state 27

    testing  go to state 31


State 7

   13 instruction: CASE • op IN cases ESAC

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    op  go to state 33


State 8

   14 instruction: EKKO • ops

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 22

    ops  go to state 34
    op   go to state 25


State 9

   15 instruction: READ • ID
   16            | READ • ID '[' op_int ']'

    ID  shift, and go to state 35


State 10

   19 instruction: RETURN •
   20            | RETURN • op_int

    integer  shift, and go to state 36
    '$'      shift, and go to state 37
    '('      shift, and go to state 38
    '+'      shift, and go to state 39
    '-'      shift, and go to state 40

    $default  reduce using rule 19 (instruction)

    op_int      go to state 41
    plus_minus  go to state 42


State 11

   21 instruction: EXIT •
   22            | EXIT • op_int

    integer  shift, and go to state 36
    '$'      shift, and go to state 37
    '('      shift, and go to state 38
    '+'      shift, and go to state 39
    '-'      shift, and go to state 40

    $default  reduce using rule 21 (instruction)

    op_int      go to state 43
    plus_minus  go to state 42


State 12

    0 $accept: program • $end

    $end  shift, and go to state 44


State 13

    1 program: instructions •
    3 instructions: instructions • ';' instruction

    ';'  shift, and go to state 45

    $default  reduce using rule 1 (program)


State 14

    4 instructions: instruction •

    $default  reduce using rule 4 (instructions)


State 15

   17 instruction: dfun •

    $default  reduce using rule 17 (instruction)


State 16

   18 instruction: cfun •

    $default  reduce using rule 18 (instruction)


State 17

   56 op: word •

    $default  reduce using rule 56 (op)


State 18

    5 instruction: ID '=' • concat

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    concat  go to state 46
    op      go to state 47


State 19

    6 instruction: ID '[' • op_int ']' '=' concat

    integer  shift, and go to state 36
    '$'      shift, and go to state 37
    '('      shift, and go to state 38
    '+'      shift, and go to state 39
    '-'      shift, and go to state 40

    op_int      go to state 48
    plus_minus  go to state 42


State 20

   60 op: '"' • string '"'

    string  shift, and go to state 49


State 21

   61 op: '\'' • string '\''

    string  shift, and go to state 50


State 22

   38 ops: '$' • '{' ID '[' '*' ']' '}'
   54 op: '$' • '{' ID '}'
   55   | '$' • '{' ID '[' op_int ']' '}'
   57   | '$' • integer
   58   | '$' • '*'
   59   | '$' • '?'
   62   | '$' • '(' expr sum_int ')'
   63   | '$' • '(' cfun ')'

    integer  shift, and go to state 51
    '*'      shift, and go to state 52
    '{'      shift, and go to state 53
    '('      shift, and go to state 54
    '?'      shift, and go to state 55


State 23

   90 dfun: ID '(' • ')' '{' declarations instructions '}'

    ')'  shift, and go to state 56


State 24

   36 ops: ops • op
   93 cfun: ID ops •

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    $default  reduce using rule 93 (cfun)

    op  go to state 57


State 25

   37 ops: op •

    $default  reduce using rule 37 (ops)


State 26

    7 instruction: declare ID • '[' integer ']'

    '['  shift, and go to state 58


State 27

   41 testing: test • test_expr

    word   shift, and go to state 17
    null   shift, and go to state 59
    nnull  shift, and go to state 60
    '"'    shift, and go to state 20
    '\''   shift, and go to state 21
    '$'    shift, and go to state 32
    '('    shift, and go to state 61
    '!'    shift, and go to state 62

    concat      go to state 63
    test_expr   go to state 64
    test_expr2  go to state 65
    test_expr3  go to state 66
    test_instr  go to state 67
    op          go to state 68
    operator1   go to state 69


State 28

    8 instruction: IF testing • THEN instructions maybe_else instructions FI

    THEN  shift, and go to state 70


State 29

    9 instruction: FOR ID • DO instructions DONE
   10            | FOR ID • IN ops DO instructions DONE

    DO  shift, and go to state 71
    IN  shift, and go to state 72


State 30

   11 instruction: WHILE testing • DO instructions DONE

    DO  shift, and go to state 73


State 31

   12 instruction: UNTIL testing • DO instructions DONE

    DO  shift, and go to state 74


State 32

   54 op: '$' • '{' ID '}'
   55   | '$' • '{' ID '[' op_int ']' '}'
   57   | '$' • integer
   58   | '$' • '*'
   59   | '$' • '?'
   62   | '$' • '(' expr sum_int ')'
   63   | '$' • '(' cfun ')'

    integer  shift, and go to state 51
    '*'      shift, and go to state 52
    '{'      shift, and go to state 75
    '('      shift, and go to state 54
    '?'      shift, and go to state 55


State 33

   13 instruction: CASE op • IN cases ESAC

    IN  shift, and go to state 76


State 34

   14 instruction: EKKO ops •
   36 ops: ops • op

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    $default  reduce using rule 14 (instruction)

    op  go to state 57


State 35

   15 instruction: READ ID •
   16            | READ ID • '[' op_int ']'

    '['  shift, and go to state 77

    $default  reduce using rule 15 (instruction)


State 36

   82 op_int: integer •

    $default  reduce using rule 82 (op_int)


State 37

   76 op_int: '$' • '{' ID '}'
   77       | '$' • '{' ID '[' op_int ']' '}'
   78       | '$' • integer

    integer  shift, and go to state 78
    '{'      shift, and go to state 79


State 38

   84 op_int: '(' • sum_int ')'

    integer  shift, and go to state 36
    '$'      shift, and go to state 37
    '('      shift, and go to state 38
    '+'      shift, and go to state 39
    '-'      shift, and go to state 40

    sum_int     go to state 80
    prod_int    go to state 81
    op_int      go to state 82
    plus_minus  go to state 42


State 39

   85 plus_minus: '+' •

    $default  reduce using rule 85 (plus_minus)


State 40

   86 plus_minus: '-' •

    $default  reduce using rule 86 (plus_minus)


State 41

   20 instruction: RETURN op_int •

    $default  reduce using rule 20 (instruction)


State 42

   79 op_int: plus_minus • '$' '{' ID '}'
   80       | plus_minus • '$' '{' ID '[' op_int ']' '}'
   81       | plus_minus • '$' integer
   83       | plus_minus • integer

    integer  shift, and go to state 83
    '$'      shift, and go to state 84


State 43

   22 instruction: EXIT op_int •

    $default  reduce using rule 22 (instruction)


State 44

    0 $accept: program $end •

    $default  accept


State 45

    3 instructions: instructions ';' • instruction

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instruction  go to state 85
    dfun         go to state 15
    cfun         go to state 16


State 46

    5 instruction: ID '=' concat •
   39 concat: concat • op

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    $default  reduce using rule 5 (instruction)

    op  go to state 86


State 47

   40 concat: op •

    $default  reduce using rule 40 (concat)


State 48

    6 instruction: ID '[' op_int • ']' '=' concat

    ']'  shift, and go to state 87


State 49

   60 op: '"' string • '"'

    '"'  shift, and go to state 88


State 50

   61 op: '\'' string • '\''

    '\''  shift, and go to state 89


State 51

   57 op: '$' integer •

    $default  reduce using rule 57 (op)


State 52

   58 op: '$' '*' •

    $default  reduce using rule 58 (op)


State 53

   38 ops: '$' '{' • ID '[' '*' ']' '}'
   54 op: '$' '{' • ID '}'
   55   | '$' '{' • ID '[' op_int ']' '}'

    ID  shift, and go to state 90


State 54

   62 op: '$' '(' • expr sum_int ')'
   63   | '$' '(' • cfun ')'

    ID    shift, and go to state 91
    expr  shift, and go to state 92

    cfun  go to state 93


State 55

   59 op: '$' '?' •

    $default  reduce using rule 59 (op)


State 56

   90 dfun: ID '(' ')' • '{' declarations instructions '}'

    '{'  shift, and go to state 94


State 57

   36 ops: ops op •

    $default  reduce using rule 36 (ops)


State 58

    7 instruction: declare ID '[' • integer ']'

    integer  shift, and go to state 95


State 59

   65 operator1: null •

    $default  reduce using rule 65 (operator1)


State 60

   64 operator1: nnull •

    $default  reduce using rule 64 (operator1)


State 61

   46 test_expr3: '(' • test_expr ')'

    word   shift, and go to state 17
    null   shift, and go to state 59
    nnull  shift, and go to state 60
    '"'    shift, and go to state 20
    '\''   shift, and go to state 21
    '$'    shift, and go to state 32
    '('    shift, and go to state 61
    '!'    shift, and go to state 62

    concat      go to state 63
    test_expr   go to state 96
    test_expr2  go to state 65
    test_expr3  go to state 66
    test_instr  go to state 67
    op          go to state 68
    operator1   go to state 69


State 62

   47 test_expr3: '!' • '(' test_expr ')'
   49           | '!' • test_instr

    word   shift, and go to state 17
    null   shift, and go to state 59
    nnull  shift, and go to state 60
    '"'    shift, and go to state 20
    '\''   shift, and go to state 21
    '$'    shift, and go to state 32
    '('    shift, and go to state 97

    concat      go to state 63
    test_instr  go to state 98
    op          go to state 68
    operator1   go to state 69


State 63

   39 concat: concat • op
   50 test_instr: concat • eq concat
   51           | concat • neq concat

    word  shift, and go to state 17
    eq    shift, and go to state 99
    neq   shift, and go to state 100
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    op  go to state 86


State 64

   41 testing: test test_expr •
   42 test_expr: test_expr • or test_expr2

    or  shift, and go to state 101

    $default  reduce using rule 41 (testing)


State 65

   43 test_expr: test_expr2 •
   44 test_expr2: test_expr2 • and test_expr3

    and  shift, and go to state 102

    $default  reduce using rule 43 (test_expr)


State 66

   45 test_expr2: test_expr3 •

    $default  reduce using rule 45 (test_expr2)


State 67

   48 test_expr3: test_instr •

    $default  reduce using rule 48 (test_expr3)


State 68

   40 concat: op •
   53 test_instr: op • operator2 op

    eq   shift, and go to state 103
    neq  shift, and go to state 104
    gt   shift, and go to state 105
    ge   shift, and go to state 106
    lt   shift, and go to state 107
    le   shift, and go to state 108

    eq        [reduce using rule 40 (concat)]
    neq       [reduce using rule 40 (concat)]
    $default  reduce using rule 40 (concat)

    operator2  go to state 109


State 69

   52 test_instr: operator1 • concat

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    concat  go to state 110
    op      go to state 47


State 70

    8 instruction: IF testing THEN • instructions maybe_else instructions FI

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 111
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 71

    9 instruction: FOR ID DO • instructions DONE

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 112
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 72

   10 instruction: FOR ID IN • ops DO instructions DONE

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 22

    ops  go to state 113
    op   go to state 25


State 73

   11 instruction: WHILE testing DO • instructions DONE

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 114
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 74

   12 instruction: UNTIL testing DO • instructions DONE

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 115
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 75

   54 op: '$' '{' • ID '}'
   55   | '$' '{' • ID '[' op_int ']' '}'

    ID  shift, and go to state 116


State 76

   13 instruction: CASE op IN • cases ESAC

    word  shift, and go to state 117
    '"'   shift, and go to state 118
    '\''  shift, and go to state 119
    '*'   shift, and go to state 120

    cases   go to state 121
    filter  go to state 122


State 77

   16 instruction: READ ID '[' • op_int ']'

    integer  shift, and go to state 36
    '$'      shift, and go to state 37
    '('      shift, and go to state 38
    '+'      shift, and go to state 39
    '-'      shift, and go to state 40

    op_int      go to state 123
    plus_minus  go to state 42


State 78

   78 op_int: '$' integer •

    $default  reduce using rule 78 (op_int)


State 79

   76 op_int: '$' '{' • ID '}'
   77       | '$' '{' • ID '[' op_int ']' '}'

    ID  shift, and go to state 124


State 80

   72 sum_int: sum_int • plus_minus prod_int
   84 op_int: '(' sum_int • ')'

    ')'  shift, and go to state 125
    '+'  shift, and go to state 39
    '-'  shift, and go to state 40

    plus_minus  go to state 126


State 81

   73 sum_int: prod_int •
   74 prod_int: prod_int • mult_div_mod op_int

    '*'  shift, and go to state 127
    '/'  shift, and go to state 128
    '%'  shift, and go to state 129

    $default  reduce using rule 73 (sum_int)

    mult_div_mod  go to state 130


State 82

   75 prod_int: op_int •

    $default  reduce using rule 75 (prod_int)


State 83

   83 op_int: plus_minus integer •

    $default  reduce using rule 83 (op_int)


State 84

   79 op_int: plus_minus '$' • '{' ID '}'
   80       | plus_minus '$' • '{' ID '[' op_int ']' '}'
   81       | plus_minus '$' • integer

    integer  shift, and go to state 131
    '{'      shift, and go to state 132


State 85

    3 instructions: instructions ';' instruction •

    $default  reduce using rule 3 (instructions)


State 86

   39 concat: concat op •

    $default  reduce using rule 39 (concat)


State 87

    6 instruction: ID '[' op_int ']' • '=' concat

    '='  shift, and go to state 133


State 88

   60 op: '"' string '"' •

    $default  reduce using rule 60 (op)


State 89

   61 op: '\'' string '\'' •

    $default  reduce using rule 61 (op)


State 90

   38 ops: '$' '{' ID • '[' '*' ']' '}'
   54 op: '$' '{' ID • '}'
   55   | '$' '{' ID • '[' op_int ']' '}'

    '['  shift, and go to state 134
    '}'  shift, and go to state 135


State 91

   93 cfun: ID • ops
   94     | ID •

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 22

    $default  reduce using rule 94 (cfun)

    ops  go to state 24
    op   go to state 25


State 92

   62 op: '$' '(' expr • sum_int ')'

    integer  shift, and go to state 36
    '$'      shift, and go to state 37
    '('      shift, and go to state 38
    '+'      shift, and go to state 39
    '-'      shift, and go to state 40

    sum_int     go to state 136
    prod_int    go to state 81
    op_int      go to state 82
    plus_minus  go to state 42


State 93

   63 op: '$' '(' cfun • ')'

    ')'  shift, and go to state 137


State 94

   90 dfun: ID '(' ')' '{' • declarations instructions '}'

    $default  reduce using rule 92 (declarations)

    declarations  go to state 138


State 95

    7 instruction: declare ID '[' integer • ']'

    ']'  shift, and go to state 139


State 96

   42 test_expr: test_expr • or test_expr2
   46 test_expr3: '(' test_expr • ')'

    or   shift, and go to state 101
    ')'  shift, and go to state 140


State 97

   47 test_expr3: '!' '(' • test_expr ')'

    word   shift, and go to state 17
    null   shift, and go to state 59
    nnull  shift, and go to state 60
    '"'    shift, and go to state 20
    '\''   shift, and go to state 21
    '$'    shift, and go to state 32
    '('    shift, and go to state 61
    '!'    shift, and go to state 62

    concat      go to state 63
    test_expr   go to state 141
    test_expr2  go to state 65
    test_expr3  go to state 66
    test_instr  go to state 67
    op          go to state 68
    operator1   go to state 69


State 98

   49 test_expr3: '!' test_instr •

    $default  reduce using rule 49 (test_expr3)


State 99

   50 test_instr: concat eq • concat

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    concat  go to state 142
    op      go to state 47


State 100

   51 test_instr: concat neq • concat

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    concat  go to state 143
    op      go to state 47


State 101

   42 test_expr: test_expr or • test_expr2

    word   shift, and go to state 17
    null   shift, and go to state 59
    nnull  shift, and go to state 60
    '"'    shift, and go to state 20
    '\''   shift, and go to state 21
    '$'    shift, and go to state 32
    '('    shift, and go to state 61
    '!'    shift, and go to state 62

    concat      go to state 63
    test_expr2  go to state 144
    test_expr3  go to state 66
    test_instr  go to state 67
    op          go to state 68
    operator1   go to state 69


State 102

   44 test_expr2: test_expr2 and • test_expr3

    word   shift, and go to state 17
    null   shift, and go to state 59
    nnull  shift, and go to state 60
    '"'    shift, and go to state 20
    '\''   shift, and go to state 21
    '$'    shift, and go to state 32
    '('    shift, and go to state 61
    '!'    shift, and go to state 62

    concat      go to state 63
    test_expr3  go to state 145
    test_instr  go to state 67
    op          go to state 68
    operator1   go to state 69


State 103

   66 operator2: eq •

    $default  reduce using rule 66 (operator2)


State 104

   67 operator2: neq •

    $default  reduce using rule 67 (operator2)


State 105

   68 operator2: gt •

    $default  reduce using rule 68 (operator2)


State 106

   69 operator2: ge •

    $default  reduce using rule 69 (operator2)


State 107

   70 operator2: lt •

    $default  reduce using rule 70 (operator2)


State 108

   71 operator2: le •

    $default  reduce using rule 71 (operator2)


State 109

   53 test_instr: op operator2 • op

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    op  go to state 146


State 110

   39 concat: concat • op
   52 test_instr: operator1 concat •

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    $default  reduce using rule 52 (test_instr)

    op  go to state 86


State 111

    3 instructions: instructions • ';' instruction
    8 instruction: IF testing THEN instructions • maybe_else instructions FI

    ELIF  shift, and go to state 147
    ELSE  shift, and go to state 148
    ';'   shift, and go to state 45

    $default  reduce using rule 25 (maybe_else)

    maybe_else  go to state 149


State 112

    3 instructions: instructions • ';' instruction
    9 instruction: FOR ID DO instructions • DONE

    DONE  shift, and go to state 150
    ';'   shift, and go to state 45


State 113

   10 instruction: FOR ID IN ops • DO instructions DONE
   36 ops: ops • op

    DO    shift, and go to state 151
    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    op  go to state 57


State 114

    3 instructions: instructions • ';' instruction
   11 instruction: WHILE testing DO instructions • DONE

    DONE  shift, and go to state 152
    ';'   shift, and go to state 45


State 115

    3 instructions: instructions • ';' instruction
   12 instruction: UNTIL testing DO instructions • DONE

    DONE  shift, and go to state 153
    ';'   shift, and go to state 45


State 116

   54 op: '$' '{' ID • '}'
   55   | '$' '{' ID • '[' op_int ']' '}'

    '['  shift, and go to state 154
    '}'  shift, and go to state 135


State 117

   29 filter: word •

    $default  reduce using rule 29 (filter)


State 118

   30 filter: '"' • string '"'

    string  shift, and go to state 155


State 119

   31 filter: '\'' • string '\''

    string  shift, and go to state 156


State 120

   35 filter: '*' •

    $default  reduce using rule 35 (filter)


State 121

   13 instruction: CASE op IN cases • ESAC
   27 cases: cases • filter $@1 ')' instructions ';' ';'

    ESAC  shift, and go to state 157
    word  shift, and go to state 117
    '"'   shift, and go to state 118
    '\''  shift, and go to state 119
    '*'   shift, and go to state 120

    filter  go to state 158


State 122

   28 cases: filter • ')' instructions ';' ';'
   32 filter: filter • '|' word
   33       | filter • '|' '"' string '"'
   34       | filter • '|' '\'' string '\''

    ')'  shift, and go to state 159
    '|'  shift, and go to state 160


State 123

   16 instruction: READ ID '[' op_int • ']'

    ']'  shift, and go to state 161


State 124

   76 op_int: '$' '{' ID • '}'
   77       | '$' '{' ID • '[' op_int ']' '}'

    '['  shift, and go to state 162
    '}'  shift, and go to state 163


State 125

   84 op_int: '(' sum_int ')' •

    $default  reduce using rule 84 (op_int)


State 126

   72 sum_int: sum_int plus_minus • prod_int

    integer  shift, and go to state 36
    '$'      shift, and go to state 37
    '('      shift, and go to state 38
    '+'      shift, and go to state 39
    '-'      shift, and go to state 40

    prod_int    go to state 164
    op_int      go to state 82
    plus_minus  go to state 42


State 127

   87 mult_div_mod: '*' •

    $default  reduce using rule 87 (mult_div_mod)


State 128

   88 mult_div_mod: '/' •

    $default  reduce using rule 88 (mult_div_mod)


State 129

   89 mult_div_mod: '%' •

    $default  reduce using rule 89 (mult_div_mod)


State 130

   74 prod_int: prod_int mult_div_mod • op_int

    integer  shift, and go to state 36
    '$'      shift, and go to state 37
    '('      shift, and go to state 38
    '+'      shift, and go to state 39
    '-'      shift, and go to state 40

    op_int      go to state 165
    plus_minus  go to state 42


State 131

   81 op_int: plus_minus '$' integer •

    $default  reduce using rule 81 (op_int)


State 132

   79 op_int: plus_minus '$' '{' • ID '}'
   80       | plus_minus '$' '{' • ID '[' op_int ']' '}'

    ID  shift, and go to state 166


State 133

    6 instruction: ID '[' op_int ']' '=' • concat

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    concat  go to state 167
    op      go to state 47


State 134

   38 ops: '$' '{' ID '[' • '*' ']' '}'
   55 op: '$' '{' ID '[' • op_int ']' '}'

    integer  shift, and go to state 36
    '*'      shift, and go to state 168
    '$'      shift, and go to state 37
    '('      shift, and go to state 38
    '+'      shift, and go to state 39
    '-'      shift, and go to state 40

    op_int      go to state 169
    plus_minus  go to state 42


State 135

   54 op: '$' '{' ID '}' •

    $default  reduce using rule 54 (op)


State 136

   62 op: '$' '(' expr sum_int • ')'
   72 sum_int: sum_int • plus_minus prod_int

    ')'  shift, and go to state 170
    '+'  shift, and go to state 39
    '-'  shift, and go to state 40

    plus_minus  go to state 126


State 137

   63 op: '$' '(' cfun ')' •

    $default  reduce using rule 63 (op)


State 138

   90 dfun: ID '(' ')' '{' declarations • instructions '}'
   91 declarations: declarations • local ID '=' concat ';'

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11
    local    shift, and go to state 171

    instructions  go to state 172
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 139

    7 instruction: declare ID '[' integer ']' •

    $default  reduce using rule 7 (instruction)


State 140

   46 test_expr3: '(' test_expr ')' •

    $default  reduce using rule 46 (test_expr3)


State 141

   42 test_expr: test_expr • or test_expr2
   47 test_expr3: '!' '(' test_expr • ')'

    or   shift, and go to state 101
    ')'  shift, and go to state 173


State 142

   39 concat: concat • op
   50 test_instr: concat eq concat •

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    $default  reduce using rule 50 (test_instr)

    op  go to state 86


State 143

   39 concat: concat • op
   51 test_instr: concat neq concat •

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    $default  reduce using rule 51 (test_instr)

    op  go to state 86


State 144

   42 test_expr: test_expr or test_expr2 •
   44 test_expr2: test_expr2 • and test_expr3

    and  shift, and go to state 102

    $default  reduce using rule 42 (test_expr)


State 145

   44 test_expr2: test_expr2 and test_expr3 •

    $default  reduce using rule 44 (test_expr2)


State 146

   53 test_instr: op operator2 op •

    $default  reduce using rule 53 (test_instr)


State 147

   23 maybe_else: ELIF • testing THEN instructions maybe_else

    test  shift, and go to state 27

    testing  go to state 174


State 148

   24 maybe_else: ELSE • instructions

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 175
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 149

    8 instruction: IF testing THEN instructions maybe_else • instructions FI

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 176
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 150

    9 instruction: FOR ID DO instructions DONE •

    $default  reduce using rule 9 (instruction)


State 151

   10 instruction: FOR ID IN ops DO • instructions DONE

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 177
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 152

   11 instruction: WHILE testing DO instructions DONE •

    $default  reduce using rule 11 (instruction)


State 153

   12 instruction: UNTIL testing DO instructions DONE •

    $default  reduce using rule 12 (instruction)


State 154

   55 op: '$' '{' ID '[' • op_int ']' '}'

    integer  shift, and go to state 36
    '$'      shift, and go to state 37
    '('      shift, and go to state 38
    '+'      shift, and go to state 39
    '-'      shift, and go to state 40

    op_int      go to state 169
    plus_minus  go to state 42


State 155

   30 filter: '"' string • '"'

    '"'  shift, and go to state 178


State 156

   31 filter: '\'' string • '\''

    '\''  shift, and go to state 179


State 157

   13 instruction: CASE op IN cases ESAC •

    $default  reduce using rule 13 (instruction)


State 158

   27 cases: cases filter • $@1 ')' instructions ';' ';'
   32 filter: filter • '|' word
   33       | filter • '|' '"' string '"'
   34       | filter • '|' '\'' string '\''

    '|'  shift, and go to state 160

    $default  reduce using rule 26 ($@1)

    $@1  go to state 180


State 159

   28 cases: filter ')' • instructions ';' ';'

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 181
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 160

   32 filter: filter '|' • word
   33       | filter '|' • '"' string '"'
   34       | filter '|' • '\'' string '\''

    word  shift, and go to state 182
    '"'   shift, and go to state 183
    '\''  shift, and go to state 184


State 161

   16 instruction: READ ID '[' op_int ']' •

    $default  reduce using rule 16 (instruction)


State 162

   77 op_int: '$' '{' ID '[' • op_int ']' '}'

    integer  shift, and go to state 36
    '$'      shift, and go to state 37
    '('      shift, and go to state 38
    '+'      shift, and go to state 39
    '-'      shift, and go to state 40

    op_int      go to state 185
    plus_minus  go to state 42


State 163

   76 op_int: '$' '{' ID '}' •

    $default  reduce using rule 76 (op_int)


State 164

   72 sum_int: sum_int plus_minus prod_int •
   74 prod_int: prod_int • mult_div_mod op_int

    '*'  shift, and go to state 127
    '/'  shift, and go to state 128
    '%'  shift, and go to state 129

    $default  reduce using rule 72 (sum_int)

    mult_div_mod  go to state 130


State 165

   74 prod_int: prod_int mult_div_mod op_int •

    $default  reduce using rule 74 (prod_int)


State 166

   79 op_int: plus_minus '$' '{' ID • '}'
   80       | plus_minus '$' '{' ID • '[' op_int ']' '}'

    '['  shift, and go to state 186
    '}'  shift, and go to state 187


State 167

    6 instruction: ID '[' op_int ']' '=' concat •
   39 concat: concat • op

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    $default  reduce using rule 6 (instruction)

    op  go to state 86


State 168

   38 ops: '$' '{' ID '[' '*' • ']' '}'

    ']'  shift, and go to state 188


State 169

   55 op: '$' '{' ID '[' op_int • ']' '}'

    ']'  shift, and go to state 189


State 170

   62 op: '$' '(' expr sum_int ')' •

    $default  reduce using rule 62 (op)


State 171

   91 declarations: declarations local • ID '=' concat ';'

    ID  shift, and go to state 190


State 172

    3 instructions: instructions • ';' instruction
   90 dfun: ID '(' ')' '{' declarations instructions • '}'

    ';'  shift, and go to state 45
    '}'  shift, and go to state 191


State 173

   47 test_expr3: '!' '(' test_expr ')' •

    $default  reduce using rule 47 (test_expr3)


State 174

   23 maybe_else: ELIF testing • THEN instructions maybe_else

    THEN  shift, and go to state 192


State 175

    3 instructions: instructions • ';' instruction
   24 maybe_else: ELSE instructions •

    ';'  shift, and go to state 45

    $default  reduce using rule 24 (maybe_else)


State 176

    3 instructions: instructions • ';' instruction
    8 instruction: IF testing THEN instructions maybe_else instructions • FI

    FI   shift, and go to state 193
    ';'  shift, and go to state 45


State 177

    3 instructions: instructions • ';' instruction
   10 instruction: FOR ID IN ops DO instructions • DONE

    DONE  shift, and go to state 194
    ';'   shift, and go to state 45


State 178

   30 filter: '"' string '"' •

    $default  reduce using rule 30 (filter)


State 179

   31 filter: '\'' string '\'' •

    $default  reduce using rule 31 (filter)


State 180

   27 cases: cases filter $@1 • ')' instructions ';' ';'

    ')'  shift, and go to state 195


State 181

    3 instructions: instructions • ';' instruction
   28 cases: filter ')' instructions • ';' ';'

    ';'  shift, and go to state 196


State 182

   32 filter: filter '|' word •

    $default  reduce using rule 32 (filter)


State 183

   33 filter: filter '|' '"' • string '"'

    string  shift, and go to state 197


State 184

   34 filter: filter '|' '\'' • string '\''

    string  shift, and go to state 198


State 185

   77 op_int: '$' '{' ID '[' op_int • ']' '}'

    ']'  shift, and go to state 199


State 186

   80 op_int: plus_minus '$' '{' ID '[' • op_int ']' '}'

    integer  shift, and go to state 36
    '$'      shift, and go to state 37
    '('      shift, and go to state 38
    '+'      shift, and go to state 39
    '-'      shift, and go to state 40

    op_int      go to state 200
    plus_minus  go to state 42


State 187

   79 op_int: plus_minus '$' '{' ID '}' •

    $default  reduce using rule 79 (op_int)


State 188

   38 ops: '$' '{' ID '[' '*' ']' • '}'

    '}'  shift, and go to state 201


State 189

   55 op: '$' '{' ID '[' op_int ']' • '}'

    '}'  shift, and go to state 202


State 190

   91 declarations: declarations local ID • '=' concat ';'

    '='  shift, and go to state 203


State 191

   90 dfun: ID '(' ')' '{' declarations instructions '}' •

    $default  reduce using rule 90 (dfun)


State 192

   23 maybe_else: ELIF testing THEN • instructions maybe_else

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 204
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 193

    8 instruction: IF testing THEN instructions maybe_else instructions FI •

    $default  reduce using rule 8 (instruction)


State 194

   10 instruction: FOR ID IN ops DO instructions DONE •

    $default  reduce using rule 10 (instruction)


State 195

   27 cases: cases filter $@1 ')' • instructions ';' ';'

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 205
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 196

    3 instructions: instructions ';' • instruction
   28 cases: filter ')' instructions ';' • ';'

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11
    ';'      shift, and go to state 206

    instruction  go to state 85
    dfun         go to state 15
    cfun         go to state 16


State 197

   33 filter: filter '|' '"' string • '"'

    '"'  shift, and go to state 207


State 198

   34 filter: filter '|' '\'' string • '\''

    '\''  shift, and go to state 208


State 199

   77 op_int: '$' '{' ID '[' op_int ']' • '}'

    '}'  shift, and go to state 209


State 200

   80 op_int: plus_minus '$' '{' ID '[' op_int • ']' '}'

    ']'  shift, and go to state 210


State 201

   38 ops: '$' '{' ID '[' '*' ']' '}' •

    $default  reduce using rule 38 (ops)


State 202

   55 op: '$' '{' ID '[' op_int ']' '}' •

    $default  reduce using rule 55 (op)


State 203

   91 declarations: declarations local ID '=' • concat ';'

    word  shift, and go to state 17
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    concat  go to state 211
    op      go to state 47


State 204

    3 instructions: instructions • ';' instruction
   23 maybe_else: ELIF testing THEN instructions • maybe_else

    ELIF  shift, and go to state 147
    ELSE  shift, and go to state 148
    ';'   shift, and go to state 45

    $default  reduce using rule 25 (maybe_else)

    maybe_else  go to state 212


State 205

    3 instructions: instructions • ';' instruction
   27 cases: cases filter $@1 ')' instructions • ';' ';'

    ';'  shift, and go to state 213


State 206

   28 cases: filter ')' instructions ';' ';' •

    $default  reduce using rule 28 (cases)


State 207

   33 filter: filter '|' '"' string '"' •

    $default  reduce using rule 33 (filter)


State 208

   34 filter: filter '|' '\'' string '\'' •

    $default  reduce using rule 34 (filter)


State 209

   77 op_int: '$' '{' ID '[' op_int ']' '}' •

    $default  reduce using rule 77 (op_int)


State 210

   80 op_int: plus_minus '$' '{' ID '[' op_int ']' • '}'

    '}'  shift, and go to state 214


State 211

   39 concat: concat • op
   91 declarations: declarations local ID '=' concat • ';'

    word  shift, and go to state 17
    ';'   shift, and go to state 215
    '"'   shift, and go to state 20
    '\''  shift, and go to state 21
    '$'   shift, and go to state 32

    op  go to state 86


State 212

   23 maybe_else: ELIF testing THEN instructions maybe_else •

    $default  reduce using rule 23 (maybe_else)


State 213

    3 instructions: instructions ';' • instruction
   27 cases: cases filter $@1 ')' instructions ';' • ';'

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11
    ';'      shift, and go to state 216

    instruction  go to state 85
    dfun         go to state 15
    cfun         go to state 16


State 214

   80 op_int: plus_minus '$' '{' ID '[' op_int ']' '}' •

    $default  reduce using rule 80 (op_int)


State 215

   91 declarations: declarations local ID '=' concat ';' •

    $default  reduce using rule 91 (declarations)


State 216

   27 cases: cases filter $@1 ')' instructions ';' ';' •

    $default  reduce using rule 27 (cases)
