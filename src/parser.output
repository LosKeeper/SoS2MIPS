State 69 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: instructions

    2 instructions: instructions ';' instruction
    3             | instruction

    4 instruction: ID '=' concat
    5            | ID '[' op_int ']' '=' concat
    6            | declare ID '[' integer ']'
    7            | IF testing THEN instructions maybe_else instructions FI
    8            | FOR ID DO instructions DONE
    9            | FOR ID IN ops DO instructions DONE
   10            | WHILE testing DO instructions DONE
   11            | UNTIL testing DO instructions DONE
   12            | CASE op IN cases ESAC
   13            | EKKO ops
   14            | READ ID
   15            | READ ID '[' op_int ']'
   16            | dfun
   17            | cfun
   18            | RETURN
   19            | RETURN op_int
   20            | EXIT
   21            | EXIT op_int

   22 maybe_else: ELIF testing THEN instructions maybe_else
   23           | ELSE instructions
   24           | %empty

   25 $@1: %empty

   26 cases: cases filter $@1 ')' instructions ';' ';'
   27      | filter ')' instructions ';' ';'

   28 filter: word
   29       | '"' string '"'
   30       | '\'' string '\''
   31       | filter '|' word
   32       | filter '|' '"' string '"'
   33       | filter '|' '\'' string '\''
   34       | '*'

   35 ops: ops op
   36    | op
   37    | '$' '{' ID '[' '*' ']' '}'

   38 concat: concat op
   39       | op

   40 testing: test test_expr

   41 test_expr: test_expr or test_expr2
   42          | test_expr2

   43 test_expr2: test_expr2 and test_expr3
   44           | test_expr3

   45 test_expr3: '(' test_expr ')'
   46           | '!' '(' test_expr ')'
   47           | test_instr
   48           | '!' test_instr

   49 test_instr: concat eq concat
   50           | concat neq concat
   51           | operator1 concat
   52           | op operator2 op

   53 op: '$' '{' ID '}'
   54   | '$' '{' ID '[' op_int ']' '}'
   55   | word
   56   | '$' integer
   57   | '$' '*'
   58   | '$' '?'
   59   | '"' string '"'
   60   | '\'' string '\''
   61   | '$' '(' expr sum_int ')'
   62   | '$' '(' cfun ')'
   63   | integer

   64 operator1: nnull
   65          | null

   66 operator2: eq
   67          | neq
   68          | gt
   69          | ge
   70          | lt
   71          | le

   72 sum_int: sum_int plus_minus prod_int
   73        | prod_int

   74 prod_int: prod_int mult_div_mod op_int
   75         | op_int

   76 op_int: '$' '{' ID '}'
   77       | '$' '{' ID '[' op_int ']' '}'
   78       | '$' integer
   79       | plus_minus '$' '{' ID '}'
   80       | plus_minus '$' '{' ID '[' op_int ']' '}'
   81       | plus_minus '$' integer
   82       | integer
   83       | plus_minus integer
   84       | '(' sum_int ')'

   85 plus_minus: '+'
   86           | '-'

   87 mult_div_mod: '*'
   88             | '/'
   89             | '%'

   90 dfun: ID '(' ')' '{' declarations instructions '}'

   91 declarations: declarations local ID '=' concat ';'
   92             | %empty

   93 cfun: ID ops
   94     | ID


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 46 48
    '"' (34) 29 32 59
    '$' (36) 37 53 54 56 57 58 61 62 76 77 78 79 80 81
    '%' (37) 89
    '\'' (39) 30 33 60
    '(' (40) 45 46 61 62 84 90
    ')' (41) 26 27 45 46 61 62 84 90
    '*' (42) 34 37 57 87
    '+' (43) 85
    '-' (45) 86
    '/' (47) 88
    ';' (59) 2 26 27 91
    '=' (61) 4 5 91
    '?' (63) 58
    '[' (91) 5 6 15 37 54 77 80
    ']' (93) 5 6 15 37 54 77 80
    '{' (123) 37 53 54 76 77 79 80 90
    '|' (124) 31 32 33
    '}' (125) 37 53 54 76 77 79 80 90
    error (256)
    ID <id> (258) 4 5 6 8 9 14 15 37 53 54 76 77 79 80 90 91 93 94
    integer <integer_t> (259) 6 56 63 78 81 82 83
    declare (260) 6
    IF (261) 7
    THEN (262) 7 22
    FI (263) 7
    ELIF (264) 22
    ELSE (265) 23
    FOR (266) 8 9
    DO (267) 8 9 10 11
    IN (268) 9 12
    DONE (269) 8 9 10 11
    WHILE (270) 10
    UNTIL (271) 11
    CASE (272) 12
    ESAC (273) 12
    EKKO (274) 13
    READ (275) 14 15
    RETURN (276) 18 19
    EXIT (277) 20 21
    word <string> (278) 28 31 55
    string <string> (279) 29 30 32 33 59 60
    test (280) 40
    or (281) 41
    and (282) 43
    eq (283) 49 66
    neq (284) 50 67
    gt (285) 68
    ge (286) 69
    lt (287) 70
    le (288) 71
    null (289) 65
    nnull (290) 64
    expr (291) 61
    local (292) 91


Nonterminals, with rules where they appear

    $accept (57)
        on left: 0
    program <quad> (58)
        on left: 1
        on right: 0
    instructions <quad> (59)
        on left: 2 3
        on right: 1 2 7 8 9 10 11 22 23 26 27 90
    instruction <quad> (60)
        on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
        on right: 2 3
    maybe_else <quad> (61)
        on left: 22 23 24
        on right: 7 22
    cases <quad> (62)
        on left: 26 27
        on right: 12 26
    $@1 (63)
        on left: 25
        on right: 26
    filter <filter_t> (64)
        on left: 28 29 30 31 32 33 34
        on right: 26 27 31 32 33
    ops <quad> (65)
        on left: 35 36 37
        on right: 9 13 35 93
    concat <quad> (66)
        on left: 38 39
        on right: 4 5 38 49 50 51 91
    testing <quad> (67)
        on left: 40
        on right: 7 10 11 22
    test_expr <quad> (68)
        on left: 41 42
        on right: 40 41 45 46
    test_expr2 <quad> (69)
        on left: 43 44
        on right: 41 42 43
    test_expr3 <quad> (70)
        on left: 45 46 47 48
        on right: 43 44
    test_instr <quad> (71)
        on left: 49 50 51 52
        on right: 47 48
    op <quad> (72)
        on left: 53 54 55 56 57 58 59 60 61 62 63
        on right: 12 35 36 38 39 52
    operator1 <integer_t> (73)
        on left: 64 65
        on right: 51
    operator2 <integer_t> (74)
        on left: 66 67 68 69 70 71
        on right: 52
    sum_int <quad> (75)
        on left: 72 73
        on right: 61 72 84
    prod_int <quad> (76)
        on left: 74 75
        on right: 72 73 74
    op_int <quad> (77)
        on left: 76 77 78 79 80 81 82 83 84
        on right: 5 15 19 21 54 74 75 77 80
    plus_minus <integer_t> (78)
        on left: 85 86
        on right: 72 79 80 81 83
    mult_div_mod <integer_t> (79)
        on left: 87 88 89
        on right: 74
    dfun <quad> (80)
        on left: 90
        on right: 16
    declarations <quad> (81)
        on left: 91 92
        on right: 90 91
    cfun <quad> (82)
        on left: 93 94
        on right: 17 62


State 0

    0 $accept: . program $end

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    program       go to state 12
    instructions  go to state 13
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 1

    4 instruction: ID . '=' concat
    5            | ID . '[' op_int ']' '=' concat
   90 dfun: ID . '(' ')' '{' declarations instructions '}'
   93 cfun: ID . ops
   94     | ID .

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '='      shift, and go to state 19
    '['      shift, and go to state 20
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 23
    '('      shift, and go to state 24

    $default  reduce using rule 94 (cfun)

    ops  go to state 25
    op   go to state 26


State 2

    6 instruction: declare . ID '[' integer ']'

    ID  shift, and go to state 27


State 3

    7 instruction: IF . testing THEN instructions maybe_else instructions FI

    test  shift, and go to state 28

    testing  go to state 29


State 4

    8 instruction: FOR . ID DO instructions DONE
    9            | FOR . ID IN ops DO instructions DONE

    ID  shift, and go to state 30


State 5

   10 instruction: WHILE . testing DO instructions DONE

    test  shift, and go to state 28

    testing  go to state 31


State 6

   11 instruction: UNTIL . testing DO instructions DONE

    test  shift, and go to state 28

    testing  go to state 32


State 7

   12 instruction: CASE . op IN cases ESAC

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    op  go to state 34


State 8

   13 instruction: EKKO . ops

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 23

    ops  go to state 35
    op   go to state 26


State 9

   14 instruction: READ . ID
   15            | READ . ID '[' op_int ']'

    ID  shift, and go to state 36


State 10

   18 instruction: RETURN .
   19            | RETURN . op_int

    integer  shift, and go to state 37
    '+'      shift, and go to state 38
    '-'      shift, and go to state 39
    '$'      shift, and go to state 40
    '('      shift, and go to state 41

    $default  reduce using rule 18 (instruction)

    op_int      go to state 42
    plus_minus  go to state 43


State 11

   20 instruction: EXIT .
   21            | EXIT . op_int

    integer  shift, and go to state 37
    '+'      shift, and go to state 38
    '-'      shift, and go to state 39
    '$'      shift, and go to state 40
    '('      shift, and go to state 41

    $default  reduce using rule 20 (instruction)

    op_int      go to state 44
    plus_minus  go to state 43


State 12

    0 $accept: program . $end

    $end  shift, and go to state 45


State 13

    1 program: instructions .
    2 instructions: instructions . ';' instruction

    ';'  shift, and go to state 46

    $default  reduce using rule 1 (program)


State 14

    3 instructions: instruction .

    $default  reduce using rule 3 (instructions)


State 15

   16 instruction: dfun .

    $default  reduce using rule 16 (instruction)


State 16

   17 instruction: cfun .

    $default  reduce using rule 17 (instruction)


State 17

   63 op: integer .

    $default  reduce using rule 63 (op)


State 18

   55 op: word .

    $default  reduce using rule 55 (op)


State 19

    4 instruction: ID '=' . concat

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    concat  go to state 47
    op      go to state 48


State 20

    5 instruction: ID '[' . op_int ']' '=' concat

    integer  shift, and go to state 37
    '+'      shift, and go to state 38
    '-'      shift, and go to state 39
    '$'      shift, and go to state 40
    '('      shift, and go to state 41

    op_int      go to state 49
    plus_minus  go to state 43


State 21

   59 op: '"' . string '"'

    string  shift, and go to state 50


State 22

   60 op: '\'' . string '\''

    string  shift, and go to state 51


State 23

   37 ops: '$' . '{' ID '[' '*' ']' '}'
   53 op: '$' . '{' ID '}'
   54   | '$' . '{' ID '[' op_int ']' '}'
   56   | '$' . integer
   57   | '$' . '*'
   58   | '$' . '?'
   61   | '$' . '(' expr sum_int ')'
   62   | '$' . '(' cfun ')'

    integer  shift, and go to state 52
    '*'      shift, and go to state 53
    '{'      shift, and go to state 54
    '('      shift, and go to state 55
    '?'      shift, and go to state 56


State 24

   90 dfun: ID '(' . ')' '{' declarations instructions '}'

    ')'  shift, and go to state 57


State 25

   35 ops: ops . op
   93 cfun: ID ops .

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    $default  reduce using rule 93 (cfun)

    op  go to state 58


State 26

   36 ops: op .

    $default  reduce using rule 36 (ops)


State 27

    6 instruction: declare ID . '[' integer ']'

    '['  shift, and go to state 59


State 28

   40 testing: test . test_expr

    integer  shift, and go to state 17
    word     shift, and go to state 18
    null     shift, and go to state 60
    nnull    shift, and go to state 61
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33
    '('      shift, and go to state 62
    '!'      shift, and go to state 63

    concat      go to state 64
    test_expr   go to state 65
    test_expr2  go to state 66
    test_expr3  go to state 67
    test_instr  go to state 68
    op          go to state 69
    operator1   go to state 70


State 29

    7 instruction: IF testing . THEN instructions maybe_else instructions FI

    THEN  shift, and go to state 71


State 30

    8 instruction: FOR ID . DO instructions DONE
    9            | FOR ID . IN ops DO instructions DONE

    DO  shift, and go to state 72
    IN  shift, and go to state 73


State 31

   10 instruction: WHILE testing . DO instructions DONE

    DO  shift, and go to state 74


State 32

   11 instruction: UNTIL testing . DO instructions DONE

    DO  shift, and go to state 75


State 33

   53 op: '$' . '{' ID '}'
   54   | '$' . '{' ID '[' op_int ']' '}'
   56   | '$' . integer
   57   | '$' . '*'
   58   | '$' . '?'
   61   | '$' . '(' expr sum_int ')'
   62   | '$' . '(' cfun ')'

    integer  shift, and go to state 52
    '*'      shift, and go to state 53
    '{'      shift, and go to state 76
    '('      shift, and go to state 55
    '?'      shift, and go to state 56


State 34

   12 instruction: CASE op . IN cases ESAC

    IN  shift, and go to state 77


State 35

   13 instruction: EKKO ops .
   35 ops: ops . op

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    $default  reduce using rule 13 (instruction)

    op  go to state 58


State 36

   14 instruction: READ ID .
   15            | READ ID . '[' op_int ']'

    '['  shift, and go to state 78

    $default  reduce using rule 14 (instruction)


State 37

   82 op_int: integer .

    $default  reduce using rule 82 (op_int)


State 38

   85 plus_minus: '+' .

    $default  reduce using rule 85 (plus_minus)


State 39

   86 plus_minus: '-' .

    $default  reduce using rule 86 (plus_minus)


State 40

   76 op_int: '$' . '{' ID '}'
   77       | '$' . '{' ID '[' op_int ']' '}'
   78       | '$' . integer

    integer  shift, and go to state 79
    '{'      shift, and go to state 80


State 41

   84 op_int: '(' . sum_int ')'

    integer  shift, and go to state 37
    '+'      shift, and go to state 38
    '-'      shift, and go to state 39
    '$'      shift, and go to state 40
    '('      shift, and go to state 41

    sum_int     go to state 81
    prod_int    go to state 82
    op_int      go to state 83
    plus_minus  go to state 43


State 42

   19 instruction: RETURN op_int .

    $default  reduce using rule 19 (instruction)


State 43

   79 op_int: plus_minus . '$' '{' ID '}'
   80       | plus_minus . '$' '{' ID '[' op_int ']' '}'
   81       | plus_minus . '$' integer
   83       | plus_minus . integer

    integer  shift, and go to state 84
    '$'      shift, and go to state 85


State 44

   21 instruction: EXIT op_int .

    $default  reduce using rule 21 (instruction)


State 45

    0 $accept: program $end .

    $default  accept


State 46

    2 instructions: instructions ';' . instruction

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instruction  go to state 86
    dfun         go to state 15
    cfun         go to state 16


State 47

    4 instruction: ID '=' concat .
   38 concat: concat . op

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    $default  reduce using rule 4 (instruction)

    op  go to state 87


State 48

   39 concat: op .

    $default  reduce using rule 39 (concat)


State 49

    5 instruction: ID '[' op_int . ']' '=' concat

    ']'  shift, and go to state 88


State 50

   59 op: '"' string . '"'

    '"'  shift, and go to state 89


State 51

   60 op: '\'' string . '\''

    '\''  shift, and go to state 90


State 52

   56 op: '$' integer .

    $default  reduce using rule 56 (op)


State 53

   57 op: '$' '*' .

    $default  reduce using rule 57 (op)


State 54

   37 ops: '$' '{' . ID '[' '*' ']' '}'
   53 op: '$' '{' . ID '}'
   54   | '$' '{' . ID '[' op_int ']' '}'

    ID  shift, and go to state 91


State 55

   61 op: '$' '(' . expr sum_int ')'
   62   | '$' '(' . cfun ')'

    ID    shift, and go to state 92
    expr  shift, and go to state 93

    cfun  go to state 94


State 56

   58 op: '$' '?' .

    $default  reduce using rule 58 (op)


State 57

   90 dfun: ID '(' ')' . '{' declarations instructions '}'

    '{'  shift, and go to state 95


State 58

   35 ops: ops op .

    $default  reduce using rule 35 (ops)


State 59

    6 instruction: declare ID '[' . integer ']'

    integer  shift, and go to state 96


State 60

   65 operator1: null .

    $default  reduce using rule 65 (operator1)


State 61

   64 operator1: nnull .

    $default  reduce using rule 64 (operator1)


State 62

   45 test_expr3: '(' . test_expr ')'

    integer  shift, and go to state 17
    word     shift, and go to state 18
    null     shift, and go to state 60
    nnull    shift, and go to state 61
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33
    '('      shift, and go to state 62
    '!'      shift, and go to state 63

    concat      go to state 64
    test_expr   go to state 97
    test_expr2  go to state 66
    test_expr3  go to state 67
    test_instr  go to state 68
    op          go to state 69
    operator1   go to state 70


State 63

   46 test_expr3: '!' . '(' test_expr ')'
   48           | '!' . test_instr

    integer  shift, and go to state 17
    word     shift, and go to state 18
    null     shift, and go to state 60
    nnull    shift, and go to state 61
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33
    '('      shift, and go to state 98

    concat      go to state 64
    test_instr  go to state 99
    op          go to state 69
    operator1   go to state 70


State 64

   38 concat: concat . op
   49 test_instr: concat . eq concat
   50           | concat . neq concat

    integer  shift, and go to state 17
    word     shift, and go to state 18
    eq       shift, and go to state 100
    neq      shift, and go to state 101
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    op  go to state 87


State 65

   40 testing: test test_expr .
   41 test_expr: test_expr . or test_expr2

    or  shift, and go to state 102

    $default  reduce using rule 40 (testing)


State 66

   42 test_expr: test_expr2 .
   43 test_expr2: test_expr2 . and test_expr3

    and  shift, and go to state 103

    $default  reduce using rule 42 (test_expr)


State 67

   44 test_expr2: test_expr3 .

    $default  reduce using rule 44 (test_expr2)


State 68

   47 test_expr3: test_instr .

    $default  reduce using rule 47 (test_expr3)


State 69

   39 concat: op .
   52 test_instr: op . operator2 op

    eq   shift, and go to state 104
    neq  shift, and go to state 105
    gt   shift, and go to state 106
    ge   shift, and go to state 107
    lt   shift, and go to state 108
    le   shift, and go to state 109

    eq        [reduce using rule 39 (concat)]
    neq       [reduce using rule 39 (concat)]
    $default  reduce using rule 39 (concat)

    operator2  go to state 110


State 70

   51 test_instr: operator1 . concat

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    concat  go to state 111
    op      go to state 48


State 71

    7 instruction: IF testing THEN . instructions maybe_else instructions FI

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 112
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 72

    8 instruction: FOR ID DO . instructions DONE

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 113
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 73

    9 instruction: FOR ID IN . ops DO instructions DONE

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 23

    ops  go to state 114
    op   go to state 26


State 74

   10 instruction: WHILE testing DO . instructions DONE

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 115
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 75

   11 instruction: UNTIL testing DO . instructions DONE

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 116
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 76

   53 op: '$' '{' . ID '}'
   54   | '$' '{' . ID '[' op_int ']' '}'

    ID  shift, and go to state 117


State 77

   12 instruction: CASE op IN . cases ESAC

    word  shift, and go to state 118
    '*'   shift, and go to state 119
    '"'   shift, and go to state 120
    '\''  shift, and go to state 121

    cases   go to state 122
    filter  go to state 123


State 78

   15 instruction: READ ID '[' . op_int ']'

    integer  shift, and go to state 37
    '+'      shift, and go to state 38
    '-'      shift, and go to state 39
    '$'      shift, and go to state 40
    '('      shift, and go to state 41

    op_int      go to state 124
    plus_minus  go to state 43


State 79

   78 op_int: '$' integer .

    $default  reduce using rule 78 (op_int)


State 80

   76 op_int: '$' '{' . ID '}'
   77       | '$' '{' . ID '[' op_int ']' '}'

    ID  shift, and go to state 125


State 81

   72 sum_int: sum_int . plus_minus prod_int
   84 op_int: '(' sum_int . ')'

    '+'  shift, and go to state 38
    '-'  shift, and go to state 39
    ')'  shift, and go to state 126

    plus_minus  go to state 127


State 82

   73 sum_int: prod_int .
   74 prod_int: prod_int . mult_div_mod op_int

    '*'  shift, and go to state 128
    '/'  shift, and go to state 129
    '%'  shift, and go to state 130

    $default  reduce using rule 73 (sum_int)

    mult_div_mod  go to state 131


State 83

   75 prod_int: op_int .

    $default  reduce using rule 75 (prod_int)


State 84

   83 op_int: plus_minus integer .

    $default  reduce using rule 83 (op_int)


State 85

   79 op_int: plus_minus '$' . '{' ID '}'
   80       | plus_minus '$' . '{' ID '[' op_int ']' '}'
   81       | plus_minus '$' . integer

    integer  shift, and go to state 132
    '{'      shift, and go to state 133


State 86

    2 instructions: instructions ';' instruction .

    $default  reduce using rule 2 (instructions)


State 87

   38 concat: concat op .

    $default  reduce using rule 38 (concat)


State 88

    5 instruction: ID '[' op_int ']' . '=' concat

    '='  shift, and go to state 134


State 89

   59 op: '"' string '"' .

    $default  reduce using rule 59 (op)


State 90

   60 op: '\'' string '\'' .

    $default  reduce using rule 60 (op)


State 91

   37 ops: '$' '{' ID . '[' '*' ']' '}'
   53 op: '$' '{' ID . '}'
   54   | '$' '{' ID . '[' op_int ']' '}'

    '['  shift, and go to state 135
    '}'  shift, and go to state 136


State 92

   93 cfun: ID . ops
   94     | ID .

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 23

    $default  reduce using rule 94 (cfun)

    ops  go to state 25
    op   go to state 26


State 93

   61 op: '$' '(' expr . sum_int ')'

    integer  shift, and go to state 37
    '+'      shift, and go to state 38
    '-'      shift, and go to state 39
    '$'      shift, and go to state 40
    '('      shift, and go to state 41

    sum_int     go to state 137
    prod_int    go to state 82
    op_int      go to state 83
    plus_minus  go to state 43


State 94

   62 op: '$' '(' cfun . ')'

    ')'  shift, and go to state 138


State 95

   90 dfun: ID '(' ')' '{' . declarations instructions '}'

    $default  reduce using rule 92 (declarations)

    declarations  go to state 139


State 96

    6 instruction: declare ID '[' integer . ']'

    ']'  shift, and go to state 140


State 97

   41 test_expr: test_expr . or test_expr2
   45 test_expr3: '(' test_expr . ')'

    or   shift, and go to state 102
    ')'  shift, and go to state 141


State 98

   46 test_expr3: '!' '(' . test_expr ')'

    integer  shift, and go to state 17
    word     shift, and go to state 18
    null     shift, and go to state 60
    nnull    shift, and go to state 61
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33
    '('      shift, and go to state 62
    '!'      shift, and go to state 63

    concat      go to state 64
    test_expr   go to state 142
    test_expr2  go to state 66
    test_expr3  go to state 67
    test_instr  go to state 68
    op          go to state 69
    operator1   go to state 70


State 99

   48 test_expr3: '!' test_instr .

    $default  reduce using rule 48 (test_expr3)


State 100

   49 test_instr: concat eq . concat

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    concat  go to state 143
    op      go to state 48


State 101

   50 test_instr: concat neq . concat

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    concat  go to state 144
    op      go to state 48


State 102

   41 test_expr: test_expr or . test_expr2

    integer  shift, and go to state 17
    word     shift, and go to state 18
    null     shift, and go to state 60
    nnull    shift, and go to state 61
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33
    '('      shift, and go to state 62
    '!'      shift, and go to state 63

    concat      go to state 64
    test_expr2  go to state 145
    test_expr3  go to state 67
    test_instr  go to state 68
    op          go to state 69
    operator1   go to state 70


State 103

   43 test_expr2: test_expr2 and . test_expr3

    integer  shift, and go to state 17
    word     shift, and go to state 18
    null     shift, and go to state 60
    nnull    shift, and go to state 61
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33
    '('      shift, and go to state 62
    '!'      shift, and go to state 63

    concat      go to state 64
    test_expr3  go to state 146
    test_instr  go to state 68
    op          go to state 69
    operator1   go to state 70


State 104

   66 operator2: eq .

    $default  reduce using rule 66 (operator2)


State 105

   67 operator2: neq .

    $default  reduce using rule 67 (operator2)


State 106

   68 operator2: gt .

    $default  reduce using rule 68 (operator2)


State 107

   69 operator2: ge .

    $default  reduce using rule 69 (operator2)


State 108

   70 operator2: lt .

    $default  reduce using rule 70 (operator2)


State 109

   71 operator2: le .

    $default  reduce using rule 71 (operator2)


State 110

   52 test_instr: op operator2 . op

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    op  go to state 147


State 111

   38 concat: concat . op
   51 test_instr: operator1 concat .

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    $default  reduce using rule 51 (test_instr)

    op  go to state 87


State 112

    2 instructions: instructions . ';' instruction
    7 instruction: IF testing THEN instructions . maybe_else instructions FI

    ELIF  shift, and go to state 148
    ELSE  shift, and go to state 149
    ';'   shift, and go to state 46

    $default  reduce using rule 24 (maybe_else)

    maybe_else  go to state 150


State 113

    2 instructions: instructions . ';' instruction
    8 instruction: FOR ID DO instructions . DONE

    DONE  shift, and go to state 151
    ';'   shift, and go to state 46


State 114

    9 instruction: FOR ID IN ops . DO instructions DONE
   35 ops: ops . op

    integer  shift, and go to state 17
    DO       shift, and go to state 152
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    op  go to state 58


State 115

    2 instructions: instructions . ';' instruction
   10 instruction: WHILE testing DO instructions . DONE

    DONE  shift, and go to state 153
    ';'   shift, and go to state 46


State 116

    2 instructions: instructions . ';' instruction
   11 instruction: UNTIL testing DO instructions . DONE

    DONE  shift, and go to state 154
    ';'   shift, and go to state 46


State 117

   53 op: '$' '{' ID . '}'
   54   | '$' '{' ID . '[' op_int ']' '}'

    '['  shift, and go to state 155
    '}'  shift, and go to state 136


State 118

   28 filter: word .

    $default  reduce using rule 28 (filter)


State 119

   34 filter: '*' .

    $default  reduce using rule 34 (filter)


State 120

   29 filter: '"' . string '"'

    string  shift, and go to state 156


State 121

   30 filter: '\'' . string '\''

    string  shift, and go to state 157


State 122

   12 instruction: CASE op IN cases . ESAC
   26 cases: cases . filter $@1 ')' instructions ';' ';'

    ESAC  shift, and go to state 158
    word  shift, and go to state 118
    '*'   shift, and go to state 119
    '"'   shift, and go to state 120
    '\''  shift, and go to state 121

    filter  go to state 159


State 123

   27 cases: filter . ')' instructions ';' ';'
   31 filter: filter . '|' word
   32       | filter . '|' '"' string '"'
   33       | filter . '|' '\'' string '\''

    ')'  shift, and go to state 160
    '|'  shift, and go to state 161


State 124

   15 instruction: READ ID '[' op_int . ']'

    ']'  shift, and go to state 162


State 125

   76 op_int: '$' '{' ID . '}'
   77       | '$' '{' ID . '[' op_int ']' '}'

    '['  shift, and go to state 163
    '}'  shift, and go to state 164


State 126

   84 op_int: '(' sum_int ')' .

    $default  reduce using rule 84 (op_int)


State 127

   72 sum_int: sum_int plus_minus . prod_int

    integer  shift, and go to state 37
    '+'      shift, and go to state 38
    '-'      shift, and go to state 39
    '$'      shift, and go to state 40
    '('      shift, and go to state 41

    prod_int    go to state 165
    op_int      go to state 83
    plus_minus  go to state 43


State 128

   87 mult_div_mod: '*' .

    $default  reduce using rule 87 (mult_div_mod)


State 129

   88 mult_div_mod: '/' .

    $default  reduce using rule 88 (mult_div_mod)


State 130

   89 mult_div_mod: '%' .

    $default  reduce using rule 89 (mult_div_mod)


State 131

   74 prod_int: prod_int mult_div_mod . op_int

    integer  shift, and go to state 37
    '+'      shift, and go to state 38
    '-'      shift, and go to state 39
    '$'      shift, and go to state 40
    '('      shift, and go to state 41

    op_int      go to state 166
    plus_minus  go to state 43


State 132

   81 op_int: plus_minus '$' integer .

    $default  reduce using rule 81 (op_int)


State 133

   79 op_int: plus_minus '$' '{' . ID '}'
   80       | plus_minus '$' '{' . ID '[' op_int ']' '}'

    ID  shift, and go to state 167


State 134

    5 instruction: ID '[' op_int ']' '=' . concat

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    concat  go to state 168
    op      go to state 48


State 135

   37 ops: '$' '{' ID '[' . '*' ']' '}'
   54 op: '$' '{' ID '[' . op_int ']' '}'

    integer  shift, and go to state 37
    '+'      shift, and go to state 38
    '-'      shift, and go to state 39
    '*'      shift, and go to state 169
    '$'      shift, and go to state 40
    '('      shift, and go to state 41

    op_int      go to state 170
    plus_minus  go to state 43


State 136

   53 op: '$' '{' ID '}' .

    $default  reduce using rule 53 (op)


State 137

   61 op: '$' '(' expr sum_int . ')'
   72 sum_int: sum_int . plus_minus prod_int

    '+'  shift, and go to state 38
    '-'  shift, and go to state 39
    ')'  shift, and go to state 171

    plus_minus  go to state 127


State 138

   62 op: '$' '(' cfun ')' .

    $default  reduce using rule 62 (op)


State 139

   90 dfun: ID '(' ')' '{' declarations . instructions '}'
   91 declarations: declarations . local ID '=' concat ';'

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11
    local    shift, and go to state 172

    instructions  go to state 173
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 140

    6 instruction: declare ID '[' integer ']' .

    $default  reduce using rule 6 (instruction)


State 141

   45 test_expr3: '(' test_expr ')' .

    $default  reduce using rule 45 (test_expr3)


State 142

   41 test_expr: test_expr . or test_expr2
   46 test_expr3: '!' '(' test_expr . ')'

    or   shift, and go to state 102
    ')'  shift, and go to state 174


State 143

   38 concat: concat . op
   49 test_instr: concat eq concat .

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    $default  reduce using rule 49 (test_instr)

    op  go to state 87


State 144

   38 concat: concat . op
   50 test_instr: concat neq concat .

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    $default  reduce using rule 50 (test_instr)

    op  go to state 87


State 145

   41 test_expr: test_expr or test_expr2 .
   43 test_expr2: test_expr2 . and test_expr3

    and  shift, and go to state 103

    $default  reduce using rule 41 (test_expr)


State 146

   43 test_expr2: test_expr2 and test_expr3 .

    $default  reduce using rule 43 (test_expr2)


State 147

   52 test_instr: op operator2 op .

    $default  reduce using rule 52 (test_instr)


State 148

   22 maybe_else: ELIF . testing THEN instructions maybe_else

    test  shift, and go to state 28

    testing  go to state 175


State 149

   23 maybe_else: ELSE . instructions

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 176
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 150

    7 instruction: IF testing THEN instructions maybe_else . instructions FI

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 177
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 151

    8 instruction: FOR ID DO instructions DONE .

    $default  reduce using rule 8 (instruction)


State 152

    9 instruction: FOR ID IN ops DO . instructions DONE

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 178
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 153

   10 instruction: WHILE testing DO instructions DONE .

    $default  reduce using rule 10 (instruction)


State 154

   11 instruction: UNTIL testing DO instructions DONE .

    $default  reduce using rule 11 (instruction)


State 155

   54 op: '$' '{' ID '[' . op_int ']' '}'

    integer  shift, and go to state 37
    '+'      shift, and go to state 38
    '-'      shift, and go to state 39
    '$'      shift, and go to state 40
    '('      shift, and go to state 41

    op_int      go to state 170
    plus_minus  go to state 43


State 156

   29 filter: '"' string . '"'

    '"'  shift, and go to state 179


State 157

   30 filter: '\'' string . '\''

    '\''  shift, and go to state 180


State 158

   12 instruction: CASE op IN cases ESAC .

    $default  reduce using rule 12 (instruction)


State 159

   26 cases: cases filter . $@1 ')' instructions ';' ';'
   31 filter: filter . '|' word
   32       | filter . '|' '"' string '"'
   33       | filter . '|' '\'' string '\''

    '|'  shift, and go to state 161

    $default  reduce using rule 25 ($@1)

    $@1  go to state 181


State 160

   27 cases: filter ')' . instructions ';' ';'

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 182
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 161

   31 filter: filter '|' . word
   32       | filter '|' . '"' string '"'
   33       | filter '|' . '\'' string '\''

    word  shift, and go to state 183
    '"'   shift, and go to state 184
    '\''  shift, and go to state 185


State 162

   15 instruction: READ ID '[' op_int ']' .

    $default  reduce using rule 15 (instruction)


State 163

   77 op_int: '$' '{' ID '[' . op_int ']' '}'

    integer  shift, and go to state 37
    '+'      shift, and go to state 38
    '-'      shift, and go to state 39
    '$'      shift, and go to state 40
    '('      shift, and go to state 41

    op_int      go to state 186
    plus_minus  go to state 43


State 164

   76 op_int: '$' '{' ID '}' .

    $default  reduce using rule 76 (op_int)


State 165

   72 sum_int: sum_int plus_minus prod_int .
   74 prod_int: prod_int . mult_div_mod op_int

    '*'  shift, and go to state 128
    '/'  shift, and go to state 129
    '%'  shift, and go to state 130

    $default  reduce using rule 72 (sum_int)

    mult_div_mod  go to state 131


State 166

   74 prod_int: prod_int mult_div_mod op_int .

    $default  reduce using rule 74 (prod_int)


State 167

   79 op_int: plus_minus '$' '{' ID . '}'
   80       | plus_minus '$' '{' ID . '[' op_int ']' '}'

    '['  shift, and go to state 187
    '}'  shift, and go to state 188


State 168

    5 instruction: ID '[' op_int ']' '=' concat .
   38 concat: concat . op

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    $default  reduce using rule 5 (instruction)

    op  go to state 87


State 169

   37 ops: '$' '{' ID '[' '*' . ']' '}'

    ']'  shift, and go to state 189


State 170

   54 op: '$' '{' ID '[' op_int . ']' '}'

    ']'  shift, and go to state 190


State 171

   61 op: '$' '(' expr sum_int ')' .

    $default  reduce using rule 61 (op)


State 172

   91 declarations: declarations local . ID '=' concat ';'

    ID  shift, and go to state 191


State 173

    2 instructions: instructions . ';' instruction
   90 dfun: ID '(' ')' '{' declarations instructions . '}'

    ';'  shift, and go to state 46
    '}'  shift, and go to state 192


State 174

   46 test_expr3: '!' '(' test_expr ')' .

    $default  reduce using rule 46 (test_expr3)


State 175

   22 maybe_else: ELIF testing . THEN instructions maybe_else

    THEN  shift, and go to state 193


State 176

    2 instructions: instructions . ';' instruction
   23 maybe_else: ELSE instructions .

    ';'  shift, and go to state 46

    $default  reduce using rule 23 (maybe_else)


State 177

    2 instructions: instructions . ';' instruction
    7 instruction: IF testing THEN instructions maybe_else instructions . FI

    FI   shift, and go to state 194
    ';'  shift, and go to state 46


State 178

    2 instructions: instructions . ';' instruction
    9 instruction: FOR ID IN ops DO instructions . DONE

    DONE  shift, and go to state 195
    ';'   shift, and go to state 46


State 179

   29 filter: '"' string '"' .

    $default  reduce using rule 29 (filter)


State 180

   30 filter: '\'' string '\'' .

    $default  reduce using rule 30 (filter)


State 181

   26 cases: cases filter $@1 . ')' instructions ';' ';'

    ')'  shift, and go to state 196


State 182

    2 instructions: instructions . ';' instruction
   27 cases: filter ')' instructions . ';' ';'

    ';'  shift, and go to state 197


State 183

   31 filter: filter '|' word .

    $default  reduce using rule 31 (filter)


State 184

   32 filter: filter '|' '"' . string '"'

    string  shift, and go to state 198


State 185

   33 filter: filter '|' '\'' . string '\''

    string  shift, and go to state 199


State 186

   77 op_int: '$' '{' ID '[' op_int . ']' '}'

    ']'  shift, and go to state 200


State 187

   80 op_int: plus_minus '$' '{' ID '[' . op_int ']' '}'

    integer  shift, and go to state 37
    '+'      shift, and go to state 38
    '-'      shift, and go to state 39
    '$'      shift, and go to state 40
    '('      shift, and go to state 41

    op_int      go to state 201
    plus_minus  go to state 43


State 188

   79 op_int: plus_minus '$' '{' ID '}' .

    $default  reduce using rule 79 (op_int)


State 189

   37 ops: '$' '{' ID '[' '*' ']' . '}'

    '}'  shift, and go to state 202


State 190

   54 op: '$' '{' ID '[' op_int ']' . '}'

    '}'  shift, and go to state 203


State 191

   91 declarations: declarations local ID . '=' concat ';'

    '='  shift, and go to state 204


State 192

   90 dfun: ID '(' ')' '{' declarations instructions '}' .

    $default  reduce using rule 90 (dfun)


State 193

   22 maybe_else: ELIF testing THEN . instructions maybe_else

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 205
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 194

    7 instruction: IF testing THEN instructions maybe_else instructions FI .

    $default  reduce using rule 7 (instruction)


State 195

    9 instruction: FOR ID IN ops DO instructions DONE .

    $default  reduce using rule 9 (instruction)


State 196

   26 cases: cases filter $@1 ')' . instructions ';' ';'

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11

    instructions  go to state 206
    instruction   go to state 14
    dfun          go to state 15
    cfun          go to state 16


State 197

    2 instructions: instructions ';' . instruction
   27 cases: filter ')' instructions ';' . ';'

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11
    ';'      shift, and go to state 207

    instruction  go to state 86
    dfun         go to state 15
    cfun         go to state 16


State 198

   32 filter: filter '|' '"' string . '"'

    '"'  shift, and go to state 208


State 199

   33 filter: filter '|' '\'' string . '\''

    '\''  shift, and go to state 209


State 200

   77 op_int: '$' '{' ID '[' op_int ']' . '}'

    '}'  shift, and go to state 210


State 201

   80 op_int: plus_minus '$' '{' ID '[' op_int . ']' '}'

    ']'  shift, and go to state 211


State 202

   37 ops: '$' '{' ID '[' '*' ']' '}' .

    $default  reduce using rule 37 (ops)


State 203

   54 op: '$' '{' ID '[' op_int ']' '}' .

    $default  reduce using rule 54 (op)


State 204

   91 declarations: declarations local ID '=' . concat ';'

    integer  shift, and go to state 17
    word     shift, and go to state 18
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    concat  go to state 212
    op      go to state 48


State 205

    2 instructions: instructions . ';' instruction
   22 maybe_else: ELIF testing THEN instructions . maybe_else

    ELIF  shift, and go to state 148
    ELSE  shift, and go to state 149
    ';'   shift, and go to state 46

    $default  reduce using rule 24 (maybe_else)

    maybe_else  go to state 213


State 206

    2 instructions: instructions . ';' instruction
   26 cases: cases filter $@1 ')' instructions . ';' ';'

    ';'  shift, and go to state 214


State 207

   27 cases: filter ')' instructions ';' ';' .

    $default  reduce using rule 27 (cases)


State 208

   32 filter: filter '|' '"' string '"' .

    $default  reduce using rule 32 (filter)


State 209

   33 filter: filter '|' '\'' string '\'' .

    $default  reduce using rule 33 (filter)


State 210

   77 op_int: '$' '{' ID '[' op_int ']' '}' .

    $default  reduce using rule 77 (op_int)


State 211

   80 op_int: plus_minus '$' '{' ID '[' op_int ']' . '}'

    '}'  shift, and go to state 215


State 212

   38 concat: concat . op
   91 declarations: declarations local ID '=' concat . ';'

    integer  shift, and go to state 17
    word     shift, and go to state 18
    ';'      shift, and go to state 216
    '"'      shift, and go to state 21
    '\''     shift, and go to state 22
    '$'      shift, and go to state 33

    op  go to state 87


State 213

   22 maybe_else: ELIF testing THEN instructions maybe_else .

    $default  reduce using rule 22 (maybe_else)


State 214

    2 instructions: instructions ';' . instruction
   26 cases: cases filter $@1 ')' instructions ';' . ';'

    ID       shift, and go to state 1
    declare  shift, and go to state 2
    IF       shift, and go to state 3
    FOR      shift, and go to state 4
    WHILE    shift, and go to state 5
    UNTIL    shift, and go to state 6
    CASE     shift, and go to state 7
    EKKO     shift, and go to state 8
    READ     shift, and go to state 9
    RETURN   shift, and go to state 10
    EXIT     shift, and go to state 11
    ';'      shift, and go to state 217

    instruction  go to state 86
    dfun         go to state 15
    cfun         go to state 16


State 215

   80 op_int: plus_minus '$' '{' ID '[' op_int ']' '}' .

    $default  reduce using rule 80 (op_int)


State 216

   91 declarations: declarations local ID '=' concat ';' .

    $default  reduce using rule 91 (declarations)


State 217

   26 cases: cases filter $@1 ')' instructions ';' ';' .

    $default  reduce using rule 26 (cases)
